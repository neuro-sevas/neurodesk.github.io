<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NeuroDesk â€“ Reproducibility</title><link>https://neuro-sevas/neurodesk.github.io/tutorials/reproducibility/</link><description>Recent content in Reproducibility on NeuroDesk</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://neuro-sevas/neurodesk.github.io/tutorials/reproducibility/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorials: Reproducible script execution with DataLad</title><link>https://neuro-sevas/neurodesk.github.io/tutorials/reproducibility/datalad-run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://neuro-sevas/neurodesk.github.io/tutorials/reproducibility/datalad-run/</guid><description>
&lt;blockquote>
&lt;p>&lt;em>This tutorial was created by Sin Kim.&lt;/em>&lt;/p>
&lt;p>Github: @AKSoo&lt;/p>
&lt;p>Twitter: @SinKim98&lt;/p>
&lt;/blockquote>
&lt;p>In addition to being a convenient method of sharing data, DataLad can also help
you create reproducible analyses by recording how certain result files were
produced (i.e. &lt;em>provenance&lt;/em>). This helps others (and you!) easily keep track of
analyses and rerun them.&lt;/p>
&lt;p>This tutorial will assume you know the basics of navigating the terminal. If
you are not familiar with the terminal at all, check the DataLad Handbook&amp;rsquo;s
&lt;a href="http://handbook.datalad.org/en/latest/intro/howto.html">brief guide&lt;/a>.&lt;/p>
&lt;h2 id="create-a-datalad-project">Create a DataLad project&lt;/h2>
&lt;p>A DataLad &lt;em>dataset&lt;/em> can be any collection of files in folders, so it could be
many things including an analysis project. Let&amp;rsquo;s go to the Neurodesktop storage
and create a dataset for some project. Open a terminal and enter these commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ cd /storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ datalad create -c yoda SomeProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] Creating a new annex repo at /home/user/Desktop/storage/SomeProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] Running procedure cfg_yoda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] == Command start (output follows) =====
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] == Command exit (modification check follows) =====
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>create(ok): /home/user/Desktop/storage/SomeProject (dataset)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">yoda?&lt;/h4>
&lt;code>-c yoda&lt;/code> option configures the dataset according to
the &lt;a href="http://handbook.datalad.org/en/latest/basics/101-127-yoda.html">YODA&lt;/a>, a
set of intuitive organizational principles for data analyses that works
especially well with version control.
&lt;/div>
&lt;p>Go in the dataset and check its contents.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ cd SomeProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CHANGELOG.md README.md code
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-a-script">Create a script&lt;/h2>
&lt;p>One of DataLad&amp;rsquo;s strengths is that it assumes very little about your datasets.
Thus, it can work with any other software on the terminal: Python, R, MATLAB,
AFNI, FSL, FreeSurfer, etc. For this tutorial, we will run the simplest Julia
script.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ ml julia
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat &amp;gt; code/hello.jl &amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(&amp;#34;hello neurodesktop&amp;#34;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EOF
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">EOF?&lt;/h4>
For sake of demonstration, we create the script using
built-in Bash terminal commands only (here document that starts after &lt;code>&amp;lt;&amp;lt; EOF&lt;/code>
and ends when you enter &lt;code>EOF&lt;/code>), but you may use whatever text editor you are
most comfortable with to create the &lt;code>code/hello.jl&lt;/code> file.
&lt;/div>
&lt;p>You may want to test (parts of) your script.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ julia code/hello.jl &amp;gt; hello.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat hello.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello neurodesktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run-and-record">Run and record&lt;/h2>
&lt;p>Before you run your analyses, you should check the dataset for changes and save
or clean them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ datalad status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>untracked: /home/user/Desktop/storage/SomeProject/code/hello.jl (file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>untracked: /home/user/Desktop/storage/SomeProject/hello.txt (file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ datalad save -m &amp;#39;hello script&amp;#39; code/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add(ok): code/hello.jl (file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>save(ok): . (dataset)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>action summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add (ok: 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> save (ok: 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clean -i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Would remove the following item:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hello.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*** Commands ***
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1: clean 2: filter by pattern 3: select by numbers 4: ask each 5: quit 6: help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>What now&amp;gt; 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Removing hello.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">git&lt;/h4>
&lt;code>git clean&lt;/code> is for removing new, untracked files. For
resetting existing, modified files to the last saved version, you would need
&lt;code>git reset --hard&lt;/code>.
&lt;/div>
&lt;p>When the dataset is clean, we are ready to &lt;code>datalad run&lt;/code>!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ mkdir outputs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ datalad run -m &amp;#39;run hello&amp;#39; -o &amp;#39;outputs/hello.txt&amp;#39; &amp;#39;julia code/hello.jl &amp;gt; outputs/hello.txt&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] == Command start (output follows) =====
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] == Command exit (modification check follows) =====
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add(ok): outputs/hello.txt (file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>save(ok): . (dataset)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s go over each of the arguments:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-m 'run hello'&lt;/code>: Human-readable message to record in the dataset log.&lt;/li>
&lt;li>&lt;code>-o 'outputs/hello.txt'&lt;/code>: Expected output of the script. You can specify
multiple &lt;code>-o&lt;/code> arguments and/or use wildcards like &lt;code>'outputs/*'&lt;/code>. This script
has no inputs, but you can similarly specify inputs with &lt;code>-i&lt;/code>.&lt;/li>
&lt;li>&lt;code>'julia ... '&lt;/code>: The final argument is the command that DataLad will run.&lt;/li>
&lt;/ul>
&lt;p>Before getting to the exciting part, let&amp;rsquo;s do a quick sanity check.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ cat outputs/hello.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello neurodesktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="view-history-and-rerun">View history and rerun&lt;/h2>
&lt;p>So what&amp;rsquo;s so good about the extra hassle of running scripts with &lt;code>datalad run&lt;/code>?
To see that, you will need to pretend you are someone else (or you of future!)
and install the dataset somewhere else. Note that &lt;code>-s&lt;/code> argument is probably a
URL if you were really someone else.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ cd ~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ datalad install -s /neurodesktop-storage/SomeProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>install(ok): /home/user/SomeProject (dataset)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd SomeProject
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because a DataLad dataset is a Git repository, people who download your dataset
can see exactly how &lt;code>outputs/hello.txt&lt;/code> was created using Git&amp;rsquo;s logs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ git log outputs/hello.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit 52cff839596ff6e33aadf925d15ab26a607317de (HEAD -&amp;gt; master, origin/master, origin/HEAD)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: Neurodesk User &amp;lt;user@neurodesk.github.io&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Thu Dec 9 08:31:15 2021 +0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [DATALAD RUNCMD] run hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> === Do not change lines below ===
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;chain&amp;#34;: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;cmd&amp;#34;: &amp;#34;julia code/hello.jl &amp;gt; outputs/hello.txt&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;dsid&amp;#34;: &amp;#34;1e82813d-856f-4118-b54d-c3823e025709&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;exit&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;extra_inputs&amp;#34;: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;inputs&amp;#34;: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;outputs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;outputs/hello.txt&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;pwd&amp;#34;: &amp;#34;.&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ^^^ Do not change lines above ^^^
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, using that information, they can re-run the command that created the file
using &lt;code>datalad rerun&lt;/code>!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ datalad rerun 52cf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] run commit 52cff83; (run hello)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run.remove(ok): outputs/hello.txt (file) [Removed file]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] == Command start (output follows) =====
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[INFO ] == Command exit (modification check follows) =====
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add(ok): outputs/hello.txt (file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>action summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add (ok: 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run.remove (ok: 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> save (notneeded: 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">git&lt;/h4>
In Git, each commit (save state) is assigned a long,
unique machine-generated ID. &lt;code>52cf&lt;/code> refers to the commit with ID that starts
with those characters. Usually 4 is the minimum needed to uniquely identify a
commit. Of course, this ID is probably different for you, so change this
argument to match your commit.
&lt;/div>
&lt;h2 id="see-also">See Also&lt;/h2>
&lt;ul>
&lt;li>To learn more basics and advanced applications of DataLad, check out the
&lt;a href="http://handbook.datalad.org/en/latest/">DataLad Handbook&lt;/a>.&lt;/li>
&lt;li>DataLad is built on top of the popular version control tool &lt;strong>Git&lt;/strong>. There
are many great resources on Git online, like this &lt;a href="https://git-scm.com/book/en/v2">free book&lt;/a>.&lt;/li>
&lt;li>DataLad is only available on the terminal. For a detailed introduction on the
Bash terminal, check the &lt;a href="https://mywiki.wooledge.org/BashGuide">BashGuide&lt;/a>.&lt;/li>
&lt;li>For even more reproducibility, you can include &lt;em>containers&lt;/em> with your dataset
to run analyses in. DataLad has an extension to support script execution in
containers. See &lt;a href="http://handbook.datalad.org/en/latest/basics/101-133-containersrun.html">here&lt;/a>.&lt;/li>
&lt;/ul></description></item></channel></rss>